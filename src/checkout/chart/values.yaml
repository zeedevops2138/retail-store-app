# Default values for checkout.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
image:
  repository: 009160045098.dkr.ecr.us-east-1.amazonaws.com/retail-store-checkout
  pullPolicy: Always
  tag: "bootstrap"
imagePullSecrets:
  - name: regcred
nameOverride: ''
fullnameOverride: ''
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''
podAnnotations: {}
podSecurityContext:
  fsGroup: 1000
securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
service:
  type: ClusterIP
  port: 80
resources:
  limits:
    memory: 256Mi
  requests:
    cpu: 128m
    memory: 256Mi
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: []
metrics:
  enabled: true
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8080'
    prometheus.io/path: '/metrics'
configMap:
  create: true
  name:
app:
  persistence:
    provider: 'in-memory'
    redis:
      endpoint: ''
  endpoints:
    orders: http://retail-store-orders:80
redis:
  create: false
  image:
    repository: public.ecr.aws/docker/library/redis
    pullPolicy: IfNotPresent
    tag: "6.0-alpine"
  service:
    type: ClusterIP
    port: 6379
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
securityGroups:
  create: false
  securityGroupIds: []
opentelemetry:
  enabled: false
  instrumentation: ''
podDisruptionBudget:
  enabled: false
  minAvailable: 2
  maxUnavailable: 1
